# build_tcms_maps.py
import json
import os
from datetime import datetime
from tcms_api import TCMS

# ------------ Connection ------------
url = "https://kiwi.dgstack.ir/xml-rpc/"
username = "dgstack"
password = "jO8Rqmzy8l"

rpc = TCMS(url, username, password).exec

# ------------ Helper functions ------------
def _add_entry(d: dict, name: str, _id: int):
    """Add a key-value entry to dict. If key already exists, store values as a list."""
    if not name:
        name = f"__NO_NAME__#{_id}"
    name = name.strip()
    if name in d:
        if isinstance(d[name], list):
            d[name].append(_id)
        else:
            d[name] = [d[name], _id]
    else:
        d[name] = _id


def _key_from(obj: dict, *candidates):
    """Choose a key name based on first available non-empty candidate field."""
    for c in candidates:
        val = obj.get(c)
        if isinstance(val, str) and val.strip():
            return val
    return obj.get("name") or obj.get("summary") or obj.get("value") or ""


# ------------ Fetch data from TCMS ------------
print("Fetching data from Kiwi TCMS ...")

products   = rpc.Product.filter({})
categories = rpc.Category.filter({})
test_cases = rpc.TestCase.filter({})
test_plans = rpc.TestPlan.filter({})
test_runs  = rpc.TestRun.filter({})
priorities = rpc.Priority.filter({})
case_stats = rpc.TestCaseStatus.filter({})
exec_stats = rpc.TestExecutionStatus.filter({})
users      = rpc.User.filter({})
components = rpc.Component.filter({})
versions   = rpc.Version.filter({})
builds     = rpc.Build.filter({})
statuses   = rpc.TestExecutionStatus.filter({})

# ------------ Build dictionaries ------------
PRODUCTS = {}
for p in products:
    _add_entry(PRODUCTS, _key_from(p, "name"), p["id"])

CATEGORIES = {}
CATEGORIES_BY_PRODUCT = {}
for c in categories:
    _add_entry(CATEGORIES, _key_from(c, "name"), c["id"])
    pid = c.get("product")
    if pid:
        CATEGORIES_BY_PRODUCT.setdefault(pid, {})
        _add_entry(CATEGORIES_BY_PRODUCT[pid], _key_from(c, "name"), c["id"])

TEST_CASES = {}
for tc in test_cases:
    _add_entry(TEST_CASES, _key_from(tc, "summary"), tc["id"])

TEST_PLANS = {}
for tp in test_plans:
    _add_entry(TEST_PLANS, _key_from(tp, "name"), tp["id"])

TEST_RUNS = {}
for tr in test_runs:
    _add_entry(TEST_RUNS, _key_from(tr, "summary", "name"), tr["id"])

PRIORITIES = {}
for pr in priorities:
    _add_entry(PRIORITIES, _key_from(pr, "value", "name"), pr["id"])

TEST_CASE_STATUSES = {}
for s in case_stats:
    _add_entry(TEST_CASE_STATUSES, _key_from(s, "name"), s["id"])

TEST_EXECUTION_STATUSES = {}
for s in exec_stats:
    _add_entry(TEST_EXECUTION_STATUSES, _key_from(s, "name"), s["id"])

USERS = {}
for u in users:
    _add_entry(USERS, _key_from(u, "username", "email", "first_name"), u["id"])

COMPONENTS = {}
for comp in components:
    _add_entry(COMPONENTS, _key_from(comp, "name"), comp["id"])

VERSIONS = {}
for v in versions:
    _add_entry(VERSIONS, _key_from(v, "value", "name"), v["id"])

VERSIONS_BY_ID = {v["id"]: v.get("product") for v in versions}

BUILDS = {}
BUILDS_BY_PRODUCT = {}
for b in builds:
    bname = _key_from(b, "name", "value")
    if not bname:
        bname = f"__NO_NAME__#{b['id']}"
    _add_entry(BUILDS, bname, b["id"])

    pid = b.get("product")
    if not pid:
        ver_id = b.get("version")
        if ver_id:
            pid = VERSIONS_BY_ID.get(ver_id)
    if not pid:
        continue

    BUILDS_BY_PRODUCT.setdefault(pid, {})
    _add_entry(BUILDS_BY_PRODUCT[pid], bname, b["id"])

# Execution statuses (name → id)
EXECUTION_STATUSES = {}
for s in statuses:
    _add_entry(EXECUTION_STATUSES, _key_from(s, "name"), s["id"])

# ------------ Write tcms_maps.py ------------
header = f"""# Auto-generated by build_tcms_maps.py
# Generated at: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
# Key = name/summary, Value = id (or list of ids if duplicates)
"""

payload = {
    "PRODUCTS": PRODUCTS,
    "CATEGORIES": CATEGORIES,
    "CATEGORIES_BY_PRODUCT": CATEGORIES_BY_PRODUCT,
    "TEST_CASES": TEST_CASES,
    "TEST_PLANS": TEST_PLANS,
    "TEST_RUNS": TEST_RUNS,
    "PRIORITIES": PRIORITIES,
    "TEST_CASE_STATUSES": TEST_CASE_STATUSES,
    "TEST_EXECUTION_STATUSES": TEST_EXECUTION_STATUSES,
    "USERS": USERS,
    "COMPONENTS": COMPONENTS,
    "VERSIONS": VERSIONS,
    "BUILDS": BUILDS,
    "BUILDS_BY_PRODUCT": BUILDS_BY_PRODUCT,
    "EXECUTION_STATUSES": EXECUTION_STATUSES,  
}

output_path = os.path.join(os.path.dirname(__file__), "tcms_maps.py")

with open(output_path, "w", encoding="utf-8") as f:
    f.write(header)
    for name, data in payload.items():
        f.write(f"{name} = {json.dumps(data, ensure_ascii=False, indent=2)}\n\n")

print(f"✅ tcms_maps.py generated at {output_path}")
